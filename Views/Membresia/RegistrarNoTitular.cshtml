@model Web.Models.Socio
@using Web.Models
@{
    ViewBag.Title = "RegistrarNoTitular";
}

<h2>Registrar Socio No Titular</h2>
<fieldset>
 <legend>Datos del Formulario</legend>
 
    <form id = form action="Guardar" method= post>
     <ul>
     <li>
                 
                <div class="editor-label">@Html.LabelFor(p => p.persona.id)</div>
                @Html.TextBoxFor(p => p.persona.id, new {@readonly = "readonly" })
            </li><li>
                    <div class="editor-label">@Html.LabelFor(p => p.persona.dni)</div>
                    @Html.TextBoxFor(p => p.persona.dni)
                    
         </li>
            <li> <div class="editor-label">@Html.LabelFor(p => p.persona.nombre)</div>
                 @Html.TextBoxFor(p => p.persona.nombre)  
                           
        </li><li>  
                 <div class="editor-label">@Html.LabelFor(p => p.persona.apPaterno)</div>  
                 @Html.TextBoxFor(p => p.persona.apPaterno)  
                            
        </li><li>           
                    <div class="editor-label">@Html.LabelFor(p => p.persona.apMaterno)</div>
                    @Html.TextBoxFor(p => p.persona.apMaterno) 
                          
        </li><li>            
                    <div class="editor-label">@Html.LabelFor(p => p.persona.direccion)</div>
                    @Html.TextBoxFor(p => p.persona.direccion)
                                
        </li><li>
            @*------------ESTODOCIVIL--------------*@
     <div class = "editor-label">    @Html.LabelFor(p => p.persona.estadoCivil)    </div>  
          @(Html.Kendo().ComboBox()
           .Name("estadoComboBox")
          .DataTextField("nombre")
          .DataValueField("nombre")
          .Filter("contains")
          .AutoBind(true)
          .Placeholder("--Seleccionar--")
          .MinLength(3)     
          .DataSource(source =>
          {
              source.Read(read =>
              {
                  read.Action("Leer_Estados", "RRHH");
              })
              .ServerFiltering(true);
          })
             )  
        </li><li>
     <div class = "editor-label">   @Html.LabelFor(p => p.familia) </div>        
           
          @(Html.Kendo().ComboBox()
           .Name("familiaComboBox")
          .DataTextField("id")
          .DataValueField("id")
                  .Filter("contains")
          .AutoBind(true)
                  .Placeholder("--Seleccionar--")
          .MinLength(3)     
          .DataSource(source =>
          {
              source.Read(read =>
              {
                  read.Action("Leer_Familia", "Membresia");
              })
              .ServerFiltering(true);
          })  .Value(Model != null && Model.familia != null ? Model.familia.id.ToString() : null)
      
    )  </li>
     @Html.TextBoxFor(p => p.persona.estadoCivil, new { style = "display: none;" })  
     @Html.TextBoxFor(p => p.familia.id, new { style = "display: none;" })        
      @Html.TextBoxFor(p => p.persona.estado, new { style = "display: none;" })  
    
    </ul>
    <div id="botones">
  <input type="button" value= "Limpiar"  id="limpiar" onclick="location.href = '@(Url.Action("RegistrarNoTitular", "Membresia"))'" class="button fright"/>
  <input type="submit" value= "Guardar" onclick="location.href = '@(Url.Action("Guardar", "Membresia"))'" class="button fright"/>
  
    </div>
  </form>
  
  </fieldset>
   
   <div id="kendotable">
    @(Html.Kendo().Grid<Web.Models.Socio>()
    .Name("Grid")
    .Columns(columns =>
    {
        columns.Bound(p => p.familia.id).Title("Fam.").Sortable(true); 
        columns.Bound(p => p.persona.dni).Sortable(true);
        //.Filterable(filterable => filterable.UI("nombreFiltro"));
        columns.Bound(p => p.persona.nombre).Sortable(true);
        columns.Bound(p => p.persona.apPaterno).Title("Ap. Paterno").Sortable(true);
        columns.Bound(p => p.persona.apMaterno).Title("Ap. Materno").Sortable(true);
        columns.Bound(p => p.persona.estadoCivil).Sortable(true);
        

    })  .Selectable()
               .Groupable()
               .Pageable()
               .Sortable()
               .Scrollable()
               .Filterable(filterable => filterable
                                              .Extra(false)
                                              .Operators(operators => operators
                                                                      .ForString(str => str.Clear()
                                                                          .Contains("Contiene")
                                                                                           .StartsWith("Empezar con")
                                                                                           .IsEqualTo("Es igual a")
                                                                                           .IsNotEqualTo("Diferente a"))
                                                                      .ForNumber(number => number.Clear()
                                                                                                 .IsGreaterThan("Es mayor a")
                                                                                                 .IsLessThan("Es menor a")
                                                                                                 .IsEqualTo("Es igual a")
                                                                                                 .IsNotEqualTo("Es diferente a"))
                                                                      )
                                )
    .DataSource(datasource => datasource
                                .Ajax()
                                    .Read(read => read.Action("Leer_Socio", "Membresia"))
        //                                                .Batch(false)
          //                                                      .ServerOperation(false)
            //                                                   .Events(events => events.Error("error_handler"))
              //                                                 .Model( model => model.Id(p => p.persona.id))
                //                                              .Destroy(update => update.Action("Eliminar", "Membresia"))



                )
)
</div>



<script type="text/javascript">
$(document).ready(function() {
var combobox = $("#familiaComboBox").data("kendoComboBox");
        combobox.bind("change",function(e){
            $("#familia_id").val(combobox.value());
             //alert("idSede: "+combobox.value()); 
        });
        
    });

$(document).ready(function() {
        var combobox = $("#estadoComboBox").data("kendoComboBox");
        combobox.bind("change",function(e){
            $("#persona_estadoCivil").val(combobox.value());
           //  alert("idSede: "+combobox.value()); 
        });
    });

function error_handler(e) {
            if (e.errors) {
                var message = "Errors:\n";
                $.each(e.errors, function (key, value) {
                    if ('errors' in value) {
                        $.each(value.errors, function () {
                            message += this + "\n";
                        });
                    }
                });
                alert(message);
            }
      }
    function nombreFiltro(element) {
        element.kendoAutoComplete({
            dataSource: {
                transport: {
                    read: "@Url.Action("/FilterMenuCustomization_Nombre", "RRHH")"
                }
            }
        });
    }

    
  </script>
  <script>
      function onAdditionalData() {
          return {
              text: $("#FamiliaComboBox").val()
          };
      }
     
</script>
<script type="text/javascript">

    $("#form").validate({
        ignore: "",
        rules: {
            "persona.estadoCivil": {
                required: true
            },

            "familia.id": {
                required: true
            },
            "persona.nombre": {
                required: true,
                maxlength: 50
            },
            "persona.apPaterno": {
                required: true,
                maxlength: 50
            },
            "persona.apMaterno": {
                required: true,
                maxlength: 50
            },

            "persona.direccion": {
                required: true,
                maxlength: 150

            },
            "persona.dni": { required: true,
                digits: true,
                minlength: 8,
                maxlength: 8
            }
        },
        messages: {
            "persona.estadoCivil": {
                required: ""

            },
            "familia.id": {
                required: ""
            },
            "persona.nombre": {
                required: "*Campo obligatorio",
                maxlength: "Tamaño máx. 50 caracteres"
            },
            "persona.apPaterno": {
                required: "*Campo obligatorio",
                maxlength: "Tamaño máx. 50 caracteres"
            },
            "persona.apMaterno": {
                required: "*Campo obligatorio",
                maxlength: "Tamaño máx. 50 caracteres"
            },
            "persona.direccion": {
                required: "*Campo obligatorio",
                maxlength: "Tamaño máx. 150 caracteres"
            },
            "persona.dni": { required: "*Campo obligatorio", digits: "Ingrese solo dígitos", minlength: "Ingrese 8 dígitos", maxlength: "Ingrese 8 dígitos"

            }
        },
        submitHandler: function ConfirmationBox(form) {
            var result = confirm("¿Está seguro de realizar los cambios?");
            if (result == true) {
                form.submit();
                return true;
            }
            else {
                return false;
            }
        }
    });
   </script>