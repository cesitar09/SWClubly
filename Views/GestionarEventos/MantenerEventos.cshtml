@model Web.Models.Evento
@using Web.Models
@{
    ViewBag.Title = "Mantener Evento";   
}


<h1>Mantener Evento</h1>
<fieldset>
 <legend>Datos del Evento</legend>
  @using (Html.BeginForm("insertarEventoNoCorp", "GestionarEventos", FormMethod.Post, new { @id = "Form" }))
  {
    <form>
    <ul>
    <li>
    @Html.LabelFor(p => p.id)
    @Html.TextBoxFor(p => p.id, new { @readonly = "readonly" })
    </li><li>
    </li><li>  
    @Html.LabelFor(p => p.nombre)
    @Html.TextBoxFor(p => p.nombre)                              
    </li><li>           
    @Html.LabelFor(p => p.precioSocio)
    @Html.TextBoxFor(p => p.precioSocio)          
    </li><li>         
    @Html.LabelFor(p => p.descripcion) 
    @Html.TextBoxFor(p => p.descripcion)              
    </li><li>                    
    @Html.LabelFor(p => p.precioInvitado)
    @Html.TextBoxFor(p => p.precioInvitado)                    
    </li><li>
    @Html.LabelFor(p => p.vacantesSocio)
    @Html.TextBoxFor(p => p.vacantesSocio)
    </li><li>
    @Html.LabelFor(p => p.vacantesInvitado)
    @Html.TextBoxFor(p => p.vacantesInvitado)
    </li><li> 
            @*-------DATEPICKER INICIO-------*@
            <div class="editor-label">@Html.LabelFor(p => p.fechaInicio)</div>
                @(Html.Kendo().DatePickerFor(p => p.fechaInicio)
                .HtmlAttributes(new { style = "width:160px" })
                .Min(new DateTime(1990, 1, 1))
                .Max(new DateTime(2020, 12, 31))
                .Events(e => e.Change("startChange"))
            )
    </li><li>  
            @*-------DATEPICKER FIN-------*@                      
            <div class="editor-label">@Html.LabelFor(p => p.fechaFin)</div>
            @(Html.Kendo().DatePickerFor(p => p.fechaFin)
                .HtmlAttributes(new { style = "width:160px" })
                .Min(new DateTime(1990, 1, 1))
                .Max(new DateTime(2020, 12, 31))
                .Events(e => e.Change("endChange"))
            )
    </li><li>
            @*-----------------EMPLEADO----------------*@
            <div class = "editor-label">   @Html.LabelFor(p => p.empleado) </div>        

            @(Html.Kendo().DropDownList()
            .Name("empleadoComboBox")
            .OptionLabel("--Seleccione--")
            .HtmlAttributes(new { style = "width:160px" })
            .DataTextField("persona.nombre")
            .DataValueField("persona.id")
            .AutoBind(true)
            .BindTo(Empleado.seleccionarTodo())
            .Value(Model != null && Model.empleado != null ? Model.empleado.persona.id.ToString() : null)
            )       
            @Html.TextBoxFor(p => p.empleado.persona.id, new { style = "display: none;" })
    </li><li>
            @*-----------------AMBIENTE----------------*@
            <div class = "editor-label">   @Html.LabelFor(p => p.reserva) </div>        

            @(Html.Kendo().DropDownList()
            .Name("ambienteComboBox")
            .OptionLabel("--Seleccione--")
            .HtmlAttributes(new { style = "width:160px" })
            .DataTextField("nombre")
            .DataValueField("id")
            .AutoBind(true)
            .BindTo(Ambiente.SeleccionarTodo())
            .Value(Model != null && Model.reserva != null ? Model.reserva.ambiente.id.ToString() : null)
            )       
            @Html.TextBoxFor(p => p.reserva.ambiente.id, new { style = "display: none;" })
    </li>
    </ul>   
    @Html.TextBoxFor(p => p.estado, new { style = "display: none;" })
    @Html.TextBoxFor(p => p.fechaInicio, new { style = "display: none;" })
    @Html.TextBoxFor(p => p.fechaFin, new { style = "display: none;" })       

    <div id="botones">
        <input type="button" value= "Limpiar"  id="limpiar" onclick="location.href = '@(Url.Action("MantenerEventos", "GestionarEventos"))'" class="button fright"/>
        <input type="submit" value=  @(Model == null ? "Insertar" : "Modificar")  />
    </div>
    @if (ViewData["message"] == null)
    { }
    else if (ViewData["message"].Equals("F"))
    { <script type= "text/javascript">              alert("Lo sentimos!\n No se pudo realizar la operacion\nVuelva a intentarlo en otro momento. ")</script>}
    else if (ViewData["message"].Equals("E"))
    { <script type= "text/javascript">              alert("La operación se realizó con éxito!")</script>}
    else if (ViewData["message"].Equals("FNV"))
    {<script type="text/javascript">                alert("Lo sentimos!\nLas fechas no son válidas. Deberá elegir un rango correcto\nIntente nuevamente")</script> }
    else if (ViewData["message"].Equals("Reservado"))
    { <script type="text/javascript">               alert("Lo sentimos!\nEl ambiente seleccionado está reservado en este período.\nIntente en un período diferente o seleccione otro ambiente\nGracias.")</script> }
        
  </form>
  }
  </fieldset>
   
   <div id="kendotable">
    @(Html.Kendo().Grid<Web.Models.Evento>()
    .Name("Grid")
    .Columns(columns =>
    {
        columns.Bound(p => p.nombre).Sortable(true);
        columns.Bound(p => p.fechaInicio).Sortable(true).Format("{0:dd/MM/yyyy}");
        columns.Bound(p => p.fechaFin).Sortable(true).Format("{0:dd/MM/yyyy}");
        columns.Bound(p => p.vacantesSocio).Sortable(true);
        columns.Bound(p => p.vacantesInvitado).Sortable(true);
        columns.Command(command => { command.Custom("Editar").Text("<span class='k-icon k-edit'></span>").Click("onChange"); command.Destroy().Text(" "); });

    })
    .Editable(editable => { editable.Mode(GridEditMode.InLine); editable.DisplayDeleteConfirmation("El registro será eliminado ¿Desea continuar?"); })
    .Selectable()
    .Pageable()
    .Sortable()
    .Filterable(filterable => filterable
         .Extra(false)
         .Operators(operators => operators
         .ForString(str => str.Clear()
         .Contains("Contiene")
         .StartsWith("Empezar con")
         .IsEqualTo("Es igual a")
         .IsNotEqualTo("Diferente a"))
         .ForNumber(number => number.Clear()
        .IsGreaterThan("Es mayor a")
        .IsLessThan("Es menor a")
        .IsEqualTo("Es igual a")
        .IsNotEqualTo("Es diferente a"))
     )
    )
    .DataSource(datasource => datasource
            .Ajax()
            .PageSize(10)
            .Read(read => read.Action("leerEventosNoCorp", "GestionarEventos"))
            .Events(events => events.Error("ErrorMessage"))
            .Model(model => model.Id(p => p.id))
            .Destroy(update => update.Action("eliminarEventoNoCorp", "GestionarEventos"))
        )
    )
</div>



<script type="text/javascript">

    $(document).ready(function () {
        var dropdownlist = $("#empleadoComboBox").data("kendoDropDownList");
        var dropdownlist2 = $("#ambienteComboBox").data("kendoDropDownList");

        $("#empleado_persona_id").val(dropdownlist.value());
        dropdownlist.bind("change", function (e) { $("#empleado_persona_id").val(dropdownlist.value()); });

        $("#reserva_ambiente_id").val(dropdownlist2.value());
        dropdownlist2.bind("change", function (e) { $("#reserva_ambiente_id").val(dropdownlist2.value()); });
    });

    function onChange(e) {

        e.preventDefault();
        var grid = $('#Grid').data('kendoGrid');
        var row = grid.select();
        var dataItem = grid.dataItem(row);
        var id = dataItem.id;
        location = "@Url.Action("modificarEventoNoCorp")"+ "?id=" + id;
    };

$("#Form").validate({
    ignore: "",
		rules: {
            "nombre":  {
                required : true ,
                maxlength : 50     
                },
            "descripcion":  {
                required : false,
                maxlength : 150
                },
            "fechaInicio":  {
                required : true
                },
			"fechaFin" : {    
                required : true
                },
            "precioSocio" :{
                required : true,
                number : true,
                range : [0,10000]
                },
            "precioInvitado" : {
                required: true,
                number: true,
                range: [0, 10000]
                },
            "vacantesSocio": {
                required: true,
                number : true,
                range : [0,1000]
                },
            "vacantesInvitado" : {
                required: true,
                number: true,
                range: [0, 4000]
                },
            "numeroInvitados" : {
                required: true,
                number: true,
                range: [0,10]
            },
            "empleado.persona.id": {
                required: true
            },
            "reserva.ambiente.id": {
                required: true
            } 
		},
		messages: {
		    "nombre": {
		        required: "*Campo obligatorio",
		        maxlength: "Tamaño máx. 50 caracteres"
		    },
		    "descripcion": {
		        required: "*Campo obligatorio",
		        maxlength: "Tamaño máx. 150 caracteres"
		    },
		    "fechaInicio": {
		        required: "*Campo obligatorio"
		    },
		    "fechaFin": {
		        required: "*Campo obligatorio"
		    },
		    "precioSocio": {
		        required: "*Campo obligatorio",
		        number: "Ingrese solo números",
		        range: "Precio fuera de rango:[0,10000]"
		    },
		    "precioInvitado": {
		        required: "*Campo obligatorio",
		        number: "Ingrese solo números",
		        range: "Precio fuera de rango:[0,10000]"
		    },
		    "vacantesSocio": {
		        required: "*Campo obligatorio",
		        number: "Ingrese solo números",
		        range: "Precio fuera de rango:[0,1000]"
		    },
		    "vacantesInvitado": {
		        required: "*Campo obligatorio",
		        number: "Ingrese solo números",
		        range: "Precio fuera de rango:[0,4000]"
		    },
		    "numeroInvitados": {
		        required: "*Campo obligatorio",
		        number: "Ingrese solo números",
		        range: "Precio fuera de rango:[0,10]"
		    },
		    "empleado.persona.id": {
		        required: "*Seleccionar"
		    },
		    "reserva.ambiente.id": {
		        required: "*Seleccionar"
		    }
		},

		submitHandler: function ConfirmationBox(form){
            var result = confirm ("¿Está seguro de realizar los cambios?");
            if (result == true){
                form.submit();
                return true;
            }
            else {
                return false;
            }
        }
});


function ErrorMessage(e) {
    alert("A ocurrido un error en el servidor!\n Vuelva a intentar la operación en unos minutos...");
};

function startChange() {
    var endPicker = $("#end").data("kendoDatePicker"),
            startDate = this.value();

    if (startDate) {
        startDate = new Date(startDate);
        startDate.setDate(startDate.getDate() + 1);
        endPicker.min(startDate);
    }
};

function endChange() {
    var startPicker = $("#start").data("kendoDatePicker"),
            endDate = this.value();

    if (endDate) {
        endDate = new Date(endDate);
        endDate.setDate(endDate.getDate() - 1);
        startPicker.max(endDate);
    }
};
var star = $("#start").kendoDatePicker({
    change: startChange
}).data("kendoDatePicker");

var end = $("#end").kendoDatePicker({
    change: endChange
}).data("kendoDatePicker");

start.max(end.value());
end.min(start.value());

</script>

