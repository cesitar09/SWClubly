@model Web.Models.ReservaCancha
@using Web.Models
@{
    ViewBag.Title = "Gestionar Reserva de Cancha";
}

<h1>@ViewBag.Title</h1>

<fieldset>
    <legend>Datos del Usuario</legend>
    <form id= "Form1" >
        <ul>
            <li>
                <div id="editor-label">@Html.LabelFor(p => p.idFamilia)</div>
                @(Html.Kendo().AutoCompleteFor(p => p.familia.id)
                        .Filter("Contiene")
                        .HighlightFirst(true)
                        .MinLength(3)
                        .HtmlAttributes(new { style = "width:155px" })
                        .DataSource(source =>
                        {
                            source.Read(read =>
                            {
                                read.Action("LeerIdFamilia", "GestionarReserva");
                            }).Events(events => events.Error("ErrorMessage"))
                            .ServerFiltering(true);
                        })
                           .Events(e => e.Close("InsertarNomUsuario"))
                )

            </li><li>
                <div id="editor-label">@Html.Label("Familia")</div>
                @Html.TextBox("nombreBox", null, new { @readonly = "readonly" })
            </li>
        </ul>
     </form>
</fieldset>

<fieldset>
    <legend>Datos de la reserva</legend>
    @using (Html.BeginForm("IngresarReservaCancha", "GestionarReserva", FormMethod.Post, new { @id = "Form2" }))
    {
        <form id="Form"><ul>
            <li>
                @Html.TextBoxFor(p => p.idFamilia, null, new { style = "display: none;" })        
            </li><li class="long">
                <div id="editor-label">@Html.LabelFor(p => p.id)</div>
                @Html.TextBoxFor(p => p.id, new { @readonly = "readonly" })
            </li><li>
                <div id="editor-label">@Html.LabelFor(p => p.idSede)</div>
                @(Html.Kendo().DropDownListFor(p => p.idSede)
                .HtmlAttributes(new { id = "categoriaSede" })
            //.Name("categoriaSede")
                .OptionLabel("--Seleccionar--")
                .DataTextField("nombre")
                .DataValueField("id")
                .AutoBind(true)
            //.BindTo(Sede.SeleccionarTodo())
                .DataSource(source =>
                {
                    source.Read(read =>
                    {
                        read.Action("LeerSedes", "GestionarReserva");
                    }).Events(events => events.Error("ErrorMessage"));
                })
                );
                
             </li><li><div id="editor-label">@Html.LabelFor(p => p.fechaInicio)</div>
                @(Html.Kendo().DatePickerFor(p => p.fechaInicio)
                .HtmlAttributes(new { style = "width:150px" })
                .Min(DateTime.Today)
                .Max(new DateTime(2020, 12, 31))
                .Events(e => e.Change("startChange"))
            )
            </li><li>
                <div id="editor-label">@Html.LabelFor(p => p.idTipoCancha)</div>
                @(Html.Kendo().DropDownListFor(p => p.idTipoCancha)
                    .HtmlAttributes(new { id = "categoriaTipo" })
                    .OptionLabel("--Seleccionar--")
                    .DataTextField("nombre")
                    .DataValueField("id")
                    .DataSource(source =>
                    {
                        source.Read(read =>
                        {
                            read.Action("LeerTipoCancha", "GestionarReserva")
                                .Data("filterSede");
                        }).Events(events => events.Error("ErrorMessage"))
                       .ServerFiltering(true);
                    })
                    .Enable(false)
                    .AutoBind(false)
                .CascadeFrom("categoriaSede")
             )
             <script>
                 function filterSede() {
                     return {
                         idSede: $("#categoriaSede").val()
                     };
                 }
            </script>
  
             </li><li><div id="editor-label">@Html.LabelFor(p => p.horaInicio)</div>
                @(Html.Kendo().TimePickerFor(p => p.horaInicio)
                .HtmlAttributes(new { style = "width:150px" })
                .Max("6:00 PM")
                .Min("8:00 AM"))

            </li><li>
                <div id="editor-label">@Html.Label("Número de cancha")</div>
                @(Html.Kendo().DropDownListFor(p => p.idCancha)
                .OptionLabel("--Seleccionar--")
                .DataTextField("numero")
                .DataValueField("id")
                .AutoBind(false)
                .DataSource(source =>
                {
                    source.Read(read =>
                    {
                        read.Action("LeerNumeroCancha", "GestionarReserva")
                            .Data("filterNumero");
                    }).Events(events => events.Error("ErrorMessage"))
                 .ServerFiltering(true);
                })
                .Enable(false)
                .AutoBind(false)
                .CascadeFrom("categoriaTipo")

                )
                 <script>
                     function filterNumero() {
                         return {
                             idTipo: $("#categoriaTipo").val(),
                             idSede: $("#categoriaSede").val()
                         };
                     }
                  </script>


            </li><li><div id="editor-label">@Html.LabelFor(p => p.horaFin)</div>
                @(Html.Kendo().TimePickerFor(p => p.horaFin)
                .HtmlAttributes(new { style = "width:150px" })
                .Max("6:00 PM")
                .Min("8:00 AM"))
            </li>   
        </ul>
        <div id="botones">
            <input type="button" value="Limpiar" id="Limpiar" onclick="location.href = '@(Url.Action("GestionarReservarCancha", "GestionarReserva"))'" />
            <input type="submit" value=@(Model == null || Model.id == 0 ? "Reservar" : "Modificar") />
        </div>
        
        @if (ViewData["message"] == null)
        { }
        else if(ViewData["message"]!=null)
        {
        {<script type="text/javascript"> alert("@ViewData["message"]")</script> };
        }
    </form>
  }
</fieldset>

<div id="kendotable">
    @(Html.Kendo().Grid<Web.Models.ReservaCancha>()
        .Name("Grid")
        .Columns(columns =>
        {

            columns.Bound(p => p.familia.id).Title("Fam.");
            columns.Bound(p => p.cancha.sede.nombre).Title("Sede");
            columns.Bound(p => p.cancha.numero).Title("Cancha").Filterable(false);
            columns.Bound(p => p.fechaInicio).Format("{0:dd/MM/yyyy}").Title("Fecha Inicio").Filterable(false);
            columns.Bound(p => p.horaInicio).Format("{0:HH:mm}").Title("Hora Inicio").Filterable(false).Sortable(false);
            columns.Bound(p => p.horaFin).Format("{0:HH:mm}").Title("Hora Fin").Filterable(false).Sortable(false);
            columns.Bound(p => p.estado);
            columns.Command(c => { c.Custom("Editar").Text("<span class='k-icon k-edit'></span>").Click("EditarPerfil"); c.Custom("Cancelar").Click("Cancelar"); });
        }
        )
        .Pageable()
        .Sortable()
        .Filterable(filterable => filterable
        .Extra(false)
        .Operators(operators => operators
            .ForString(str => str.Clear()
                .Contains("Contiene")
                .StartsWith("Empezar con"))
            .ForNumber(number => number.Clear()
                .IsGreaterThan("Es mayor a")
                .IsLessThan("Es menor a")
                .IsEqualTo("Es igual a")
                .IsNotEqualTo("Es diferente a"))
        )
       )
       .DataSource(d => d.Ajax()
            .Read(r => r.Action("LeerReservasCanchas", "GestionarReserva"))
            .Events(events => events.Error("ErrorMessage"))
           //.Model(m => m.Id(p => p.id))
            .PageSize(10)
            )
            .Selectable()
    )
</div>

<script type="text/javascript">

   
    function EditarPerfil(e) {
        e.preventDefault();
        var grid = $('#Grid').data('kendoGrid');
        var row = grid.select();
        var dataItem = grid.dataItem(row);
        var id = dataItem.id;
        location = "@Url.Action("EditarReservaCancha")" + "?id=" + id;
    }
    function Cancelar(e) {
        e.preventDefault();
        var grid = $('#Grid').data('kendoGrid');
        var row = grid.select();
        var dataItem = grid.dataItem(row);
        var id = dataItem.id;
        location = "@Url.Action("CancelarReservaCancha")" + "?id=" + id;
    }

    function InsertarNomUsuario(e) {
        var dataItem = this.value();
        document.getElementsByName('idFamilia')[0].value = dataItem;
        buscarnombre(dataItem);
    }

     function buscarnombre(value) {
        $.ajax({
            url: '@Url.Action("BuscarId")',
            type: 'POST',
            datatype: "json",
            traditional: true,
            data: {
                id: JSON.stringify(value),
            },
            success: function(persona){
                var str = persona.apPaterno + " " + persona.apMaterno
                document.getElementsByName('nombreBox')[0].value = str.toUpperCase();

            },
            error: function (event, request, settings) {
                models = [];
                window.alert("Debe ingresar una familia válido");
            },
            timeout: 20000
        });
    }
</script>


@(Html.Kendo().Window().Name("Permisos")
    .Title("Permisos del Perfil")
    .Visible(false)
    .Modal(true)
    .Draggable(true)

)



<script type="text/javascript">

$("#Form2").validate({
        ignore: "", 
		rules: {
             idSede:   {
                required: true
                },
             idTipoCancha:   {
                required: true
                },
             fechaInicio:  {
                  required: true,
                  date: true
                },

            horaInicio:  {
                required: true,
                date: true
                },
            horaFin: {
                required: true,
                date: true
                
                },

            idFamilia: {
                  required: true,
                  digits : true,
                  minlength: 5,
                  maxlength: 5        
                },

            },
		messages: {	
             idSede:  {
                required: "*Campo obligatorio"
                },
             idTipoCancha:  {
                required: "*Campo obligatorio"
                },
            fechaInicio:  {
                required: "*Campo obligatorio",
                date: "fecha Invalida"
                },
            horaInicio: {
                 required: "*Campo obligatorio",
                 date: "Hora Inicio Invalida"               
                },
            horaFin: {
                 required: "*Campo obligatorio",                
                 date: "Hora Fin Invalida"
                },
           
           idFamilia: {
                  required: "*Campo Obligatorio",
                  digits : "Solo se permiten digitos",
                  minlength: "El codigo debe tener 5 digitos",
                  maxlength: "El codigo debe tener 5 digitos"                          
                },

		},
        submitHandler: function ConfirmationBox(form) {
        var result = confirm("¿Está seguro de realizar los cambios?");
        if (result == true) {
            form.submit();
            return true;
        }
        else {
            return false;
            }
        }
		
});

    function ErrorMessage(e) {
        alert("Ha ocurrido un error en el servidor!\nVuelva a intentar la operación en unos minutos");
    }

    function startChange() {
        startDate = this.value();

        if (startDate) {
            startDate = new Date(startDate);
            startDate.setDate(startDate.getDate() + 1);
        }
    }
</script>

