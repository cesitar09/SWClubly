@model Web.Models.EventoCorporativo
@using Web.Models
@{
    ViewBag.Title = "Mantener Evento Corporativo";
}

<h1>Mantener Evento Corporativo</h1>


<fieldset>
 <legend>Datos del Formulario</legend>
 @using (Html.BeginForm("insertarEventoCorp", "GestionarEventos", FormMethod.Post, new { @id = "Form" , enctype = "multipart/form-data"}))
 {
     <form>
     <fieldset>
        <legend>Datos de la Empresa</legend>
        <ul>
            <li>
            @Html.LabelFor(p => p.razonSocial)
            @Html.TextBoxFor(p => p.razonSocial, new { id = "razon" })
            </li><li>
            @Html.LabelFor(p => p.ruc)
            @Html.TextBoxFor(p => p.ruc)
            </li><li>
            @Html.LabelFor(p => p.direccion)
            @Html.TextBoxFor(p => p.direccion)
            </li><li>
            @Html.LabelFor(p => p.paginaWeb)
            @Html.TextBoxFor(p => p.paginaWeb)
            </li><li> 
            @Html.LabelFor(p => p.numParticipantes)
            @Html.TextBoxFor(p => p.numParticipantes)
            </li>         
        </ul>
    </fieldset>
    <fieldset>
        <legend>Datos del Evento</legend>
    <ul>
    <li>
    @Html.LabelFor(p => p.id)
    @Html.TextBoxFor(p => p.id, new { @readonly = "readonly", id = "id" } )
    </li><li>
    </li><li>  
    @Html.LabelFor(p => p.nombre)
    @Html.TextBoxFor(p => p.nombre)          
    </li><li>         
    @Html.LabelFor(p => p.descripcion) 
    @Html.TextBoxFor(p => p.descripcion)                                
    </li><li> 
            @*-------DATEPICKER INICIO-------*@
            <div class="editor-label">@Html.LabelFor(p => p.fechaInicio)</div>
            @(Html.Kendo().DatePickerFor(p => p.fechaInicio)

                .HtmlAttributes(new { style = "width:160px" })
                .Min(new DateTime(1990, 1, 1))
                .Max(new DateTime(2020, 12, 31))
                .Events(e => e.Change("startChange"))
            )
    </li><li>  
            @*-------DATEPICKER FIN-------*@                      
            <div class="editor-label">@Html.LabelFor(p => p.fechaFin)</div>
            @(Html.Kendo().DatePickerFor(p => p.fechaFin)

                .HtmlAttributes(new { style = "width:160px" })
                .Min(new DateTime(1990, 1, 1))
                .Max(new DateTime(2020, 12, 31))
                .Events(e => e.Change("endChange"))
            )
    </li><li>
            @*-----------------EMPLEADO----------------*@
            <div class = "editor-label">   @Html.LabelFor(p => p.empleado) </div>        

            @(Html.Kendo().DropDownList()
            .Name("empleadoComboBox")
            .OptionLabel("--Seleccione--")
            .HtmlAttributes(new { style = "width:160px" })
            .DataTextField("persona.nombre")
            .DataValueField("persona.id")
            .AutoBind(true)
            .BindTo(Empleado.seleccionarTodo())
            .Value(Model != null && Model.empleado != null ? Model.empleado.persona.id.ToString() : null)
            )       
            @Html.TextBoxFor(p => p.empleado.persona.id, new { style = "display: none;" })
    </li><li>
            @*-----------------AMBIENTE----------------*@
            <div class = "editor-label">   @Html.LabelFor(p => p.reserva) </div>        

            @(Html.Kendo().DropDownList()
            .Name("ambienteComboBox")
            .OptionLabel("--Seleccione--")
            .HtmlAttributes(new { style = "width:160px" })
            .DataTextField("nombre")
            .DataValueField("id")
            .AutoBind(true)
            .BindTo(Ambiente.SeleccionarTodo())
            .Value(Model != null && Model.reserva != null ? Model.reserva.ambiente.id.ToString() : null)
            )       
            @Html.TextBoxFor(p => p.reserva.ambiente.id, new { style = "display: none;" })
    </li><li>
            @if (Model == null)
            {
                <input type="file" name="file" />
            }
    </li><li>
        <div id="botones">
        @if (Model != null)
        {<input type="button" value= "Descargar"  id="descargar Lista Participantes" onclick="onDownload();" class="button fright"/>}                                                                                                                                                                    
        <input type="button" value= "Limpiar"  id="limpiar" onclick="location.href = '@(Url.Action("MantenerEventosCorp", "GestionarEventos"))'" class="button fright"/>
        <input type="submit" value=  "@(Model == null ? "Insertar" : "Modificar")"/>
        </div>
    </li><li>     
    @Html.TextBoxFor(p => p.estado, new { style = "display: none;" })
    @Html.TextBoxFor(p => p.fechaInicio, new { style = "display: none;" })
    @Html.TextBoxFor(p => p.fechaFin, new { style = "display: none;" })  
    </li>
    </ul>
    </fieldset>
    @if (ViewData["message"] == null)
    { }
    else if (ViewData["message"].Equals("F"))
    { <script type= "text/javascript">          alert("Lo sentimos!\n No se pudo realizar la operacion\nVuelva a intentarlo en otro momento. ")</script>}
    else if (ViewData["message"].Equals("E"))
    { <script type= "text/javascript">          alert("La operación se realizó con éxito!")</script>}
    else if (ViewData["message"].Equals("FNV"))
    {<script type="text/javascript">            alert("Lo sentimos!\Las fechas no son válidas. Deberá elegir un rango correcto\Intente nuevamente.")</script> }
    else if (ViewData["message"].Equals("Reservado"))
    { <script type="text/javascript">           alert("Lo sentimos!\nEl ambiente seleccionado está reservado en este período.\nIntente en un período diferente o seleccione otro ambiente\nGracias.")</script> }
    else if (ViewData["message"].Equals("NoFile"))
    { <script type="text/javascript">           alert("No se encontró un listado para el evento.")</script> }
         
  </form>
 }
  </fieldset>
     
   <div id="kendotable">
    @(Html.Kendo().Grid<Web.Models.EventoCorporativo>()
    .Name("Grid")
    .Columns(columns =>
    {
        columns.Bound(p => p.nombre).Sortable(true).Width(100);
        columns.Bound(p => p.fechaInicio).Sortable(true).Format("{0:dd/MM/yyyy}").Width(100);
        columns.Bound(p => p.fechaFin).Sortable(true).Format("{0:dd/MM/yyyy}").Width(100);
        columns.Bound(p => p.razonSocial).Sortable(true).Width(100);
        columns.Bound(p => p.numParticipantes).Sortable(true).Width(50);
        columns.Command(command => { command.Custom("Editar").Text("<span class='k-icon k-edit'></span>").Click("onChange"); command.Destroy().Text(" "); });

    })
    .Editable(editable => { editable.Mode(GridEditMode.InLine); editable.DisplayDeleteConfirmation("El registro será eliminado ¿Desea continuar?"); })
    .Selectable()
    .Pageable()
    .Sortable()
    .Filterable(filterable => filterable
         .Extra(false)
         .Operators(operators => operators
         .ForString(str => str.Clear()
         .Contains("Contiene")
         .StartsWith("Empezar con")
         .IsEqualTo("Es igual a")
         .IsNotEqualTo("Diferente a"))
         .ForNumber(number => number.Clear()
        .IsGreaterThan("Es mayor a")
        .IsLessThan("Es menor a")
        .IsEqualTo("Es igual a")
        .IsNotEqualTo("Es diferente a"))
     )
    )
    .DataSource(datasource => datasource
            .Ajax()
            .PageSize(6)
            .Read(read => read.Action("leerEventosCorp", "GestionarEventos"))
            .Events(events => events.Error("ErrorMessage"))
            .Model(model => model.Id(p => p.id))
            .Destroy(update => update.Action("eliminarEventoCorp", "GestionarEventos"))
        )
    )
</div>



<script type="text/javascript">

    $(document).ready(function() {
            var dropdownlist = $("#empleadoComboBox").data("kendoDropDownList");
            var dropdownlist2 = $("#ambienteComboBox").data("kendoDropDownList");

            $("#empleado_persona_id").val(dropdownlist.value());
            dropdownlist.bind("change",function(e){$("#empleado_persona_id").val(dropdownlist.value());});

            $("#reserva_ambiente_id").val(dropdownlist2.value());
            dropdownlist2.bind("change",function(e){$("#reserva_ambiente_id").val(dropdownlist2.value());});
    });

    function onChange(e) {

        e.preventDefault();
        var grid = $('#Grid').data('kendoGrid');
        var row = grid.select();
        var dataItem = grid.dataItem(row);
        var id = dataItem.id;
        location = "@Url.Action("modificarEventoCorp")"+ "?id=" + id;
    };

    function onDownload() 
    {
        var razonSocial = $('#id').val();
        var result = confirm("Desea guardar el archivo de texto?");
            if (result == true) {
             return location = "@Url.Action("BajarArchivoEvento")"+ "?id=" + razonSocial;
            }
    };

    $("#Form").validate({
        ignore: "",
        rules: {
            razonSocial: {
                required: true,
                maxlength: 50
            },
            ruc: {
                required: true,
                maxlength: 11,
                minlength:11,
                digits:true
            },
            direccion: {
                required: false,
                maxlength: 150
            },
            paginaWeb: {
                required: false,
                maxlength: 50
            },
            numParticipantes: {
                required: true,
                number: true,
                range: [0,50]
            },
            nombre: {
                required: true,
                maxlength: 50
            },
            descripcion: {
                required: false,
                maxlength: 150
            },
            fechaInicio: {
                required: true
            },
            fechaFin: {
                required: true
            },
            precioSocio: {
                required: false,
                number: true,
                range: [0, 10000]
            },
            precioInvitado: {
                required: false,
                number: true,
                range: [0, 10000]
            },
            vacantesSocio: {
                required: false,
                number: true,
                range: [0, 1000]
            },
            vacantesInvitado: {
                required: false,
                number: true,
                range: [0, 4000]
            },
            numeroInvitados: {
                required: false,
                number: true,
                range: [0, 10]
            },
            "empleado.persona.id":{
                required:true
            },
            "reserva.ambiente.id":{
                required:true
            }  
        },
        messages: {

            razonSocial: {
                required: "*Campo obligatorio",
                maxlength: "Tamaño máx. 50 caracteres"
            },
            ruc: {
                required: "*Campo obligatorio",
                maxlength: "Ingrese 11 dígitos",
                minlength: "Ingrese 11 dígitos",
                digits:"Ingrese solo dígitos",
            },
            direccion: {
                required: "*Campo obligatorio",
                maxlength: "Tamaño máx. 150 caracteres"
            },
            paginaWeb: {
                required: "*Campo obligatorio",
                maxlength: "Tamaño máx. 50 caracteres"
            },
            numParticipantes: {
                required: "*Campo obligatorio",
                number: "Ingrese solo números",
                range: "Núm. fuera de rango [0,50]"
            },           
            nombre: {
                required: "*Campo obligatorio",
                maxlength: "Tamaño máx. 50 caracteres"
            },
            descripcion: {
                required: "*Campo obligatorio",
                maxlength: "Tamaño máx. 150 caracteres"
            },
            fechaInicio: {
                required: "*Seleccionar"
            },
            fechaFin: {
                required: "*Seleccionar"
            },
            precioSocio: {
                required: "*Campo obligatorio",
                number: "Ingrese solo números",
                range: "Precio fuera de rango:[0,10000]"
            },
            precioInvitado: {
                required: "*Campo obligatorio",
                number: "Ingrese solo números",
                range: "Precio fuera de rango:[0,10000]"
            },
            vacantesSocio: {
                required: "*Campo obligatorio",
                number: "Ingrese solo números",
                range: "Precio fuera de rango:[0,1000]"
            },
            vacantesInvitado: {
                required: "*Campo obligatorio",
                number: "Ingrese solo números",
                range: "Precio fuera de rango:[0,4000]"
            },
            "empleado.persona.id":{
                required:"*Seleccionar"
            },
            "reserva.ambiente.id":{
                required: "*Seleccionar"
            }
        },

        submitHandler: function ConfirmationBox(form) {
            var result = confirm("¿Está seguro de realizar los cambios?");
            if (result == true) {
                form.submit();
                return true;
            }
            else {
                return false;
            }
        }
    });

    function ErrorMessage(e) {
        alert("A ocurrido un error en el servidor!\n Vuelva a intentar la operación en unos minutos...");
    };

    function startChange() {
        var endPicker = $("#end").data("kendoDatePicker"),
            startDate = this.value();

        if (startDate) {
            startDate = new Date(startDate);
            startDate.setDate(startDate.getDate() + 1);
            endPicker.min(startDate);
        }
    };

    function endChange() {
        var startPicker = $("#start").data("kendoDatePicker"),
            endDate = this.value();

        if (endDate) {
            endDate = new Date(endDate);
            endDate.setDate(endDate.getDate() - 1);
            startPicker.max(endDate);
        }
    };

    var star = $("#start").kendoDatePicker({
        change: startChange
    }).data("kendoDatePicker");

    var end = $("#end").kendoDatePicker({
        change: endChange
    }).data("kendoDatePicker");

    start.max(end.value());
    end.min(start.value());

</script>

