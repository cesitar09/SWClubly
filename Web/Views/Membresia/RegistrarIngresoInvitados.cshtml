@model Web.Models.InvitadoXFamilia
@using Web.Models
@{
    ViewBag.Title = "Registrar ingreso de invitados";
}

<h1>@ViewBag.Title</h1>

@(Html.Kendo().ComboBoxFor(p => p.estado)
          .Name("Tipo")
          .Filter("contains")
          .DataTextField("Text")
          .SelectedIndex(0)
          .Value("1")
          .DataValueField("Value")
          .BindTo(new List<SelectListItem>() {
              new SelectListItem() {
                Text = "Normal", Value = "1"   
              },
              new SelectListItem() {
                Text = "Bungalow", Value = "2"   
              }
          })
          .SelectedIndex(3)
          .Suggest(true)
          .Events(e => e.Close("tipo"))
    )

<fieldset>
    <legend>Datos del Usuario</legend>
    @using (Html.BeginForm(new { @id = "Form" }))
    {
        <ul>
            <li>
                <div id="editor-label">@Html.LabelFor(p => p.familia.id)</div>
                @(Html.Kendo().AutoCompleteFor(p => p.familia.id)
                        .Name("AutocompleteId")
                        //.BindTo("familia.id")
                        //.DataTextField("familia.id")
                        .Filter("Contiene")
                        .HighlightFirst(true)
                        .MinLength(3)
                        .HtmlAttributes(new { style = "width:155px" })
                        .DataSource(source =>
                        {
                            source.Read(read =>
                            {
                                read.Action("LeerId", "Membresia");
                            })
                            .ServerFiltering(true);
                        })
                        .Events(e => e.Close("InsertarNomUsuario"))
                )
            </li><li>
                <div id="editor-label">@Html.Label("Familia")</div>
                @Html.TextBox("nombreBox", null, new { @readonly = "readonly" })
                @Html.TextBoxFor(p => p.familia.id, null, new { style = "display: none;" })
                @Html.TextBoxFor(p => p.estado, null, new { style = "display: none;" })
                @Html.TextBoxFor(p => p.invitado.dni, null, new { style = "display: none;" })
            </li><li>
                <div id="editor-label">@Html.LabelFor(p => p.invitado.dni)</div>
                @(Html.Kendo().AutoCompleteFor(p => p.invitado.dni)
                        .Name("AutocompleteDni")
            //.DataTextField("id")
                        .Filter("Contiene")
                        .MinLength(5)
                        .HighlightFirst(true)
                        .HtmlAttributes(new { style = "width:155px" })
                        .DataSource(source =>
                        {
                            source.Read(read =>
                            {
                                read.Action("LeerDNI", "Membresia");
                            })
                            .ServerFiltering(true);
                        })
                        .Events(e => e.Change("InsertarInvitado"))

                )
            </li><li>
                <div id="editor-label">@Html.LabelFor(p => p.invitado.nombre)</div>
                @Html.TextBoxFor(p => p.invitado.nombre, null, new { @readonly = "readonly" })
            </li><li>
                <div id="editor-label">@Html.LabelFor(p => p.invitado.apPaterno)</div>
                @Html.TextBoxFor(p => p.invitado.apPaterno, null, new { @readonly = "readonly" })
            </li><li>
                <div id="editor-label">@Html.LabelFor(p => p.invitado.apMaterno)</div>
                @Html.TextBoxFor(p => p.invitado.apMaterno, null, new { @readonly = "readonly" })
            </li>
        </ul>
        <div id="botones">
            <input type="submit" value="Ingresar" />
        </div>
    }
</fieldset>


<div id="kendo-table">
    @(Html.Kendo().Grid<Web.Models.InvitadoXFamilia>()
    .Name("Grid")
    .Columns(columns =>
        {
            columns.Bound(p => p.familia.id);
            //columns.Bound(p => p.familia.usuario.nomUsuario);
            columns.Template(p => p.invitado).ClientTemplate("#=invitado.nombre# + + #=invitado.apPaterno# + + #=invitado.apMaterno#").Title("Invitado");
            columns.Bound(p => p.invitado.dni);
            columns.Bound(p => p.fechaIngreso).Format("{0:H}:{0:mm}:{0:ss}").Title("Hora de Ingreso");
            //columns.Bound(p => p.pago.monto);
        }
        )
        .DataSource(dataSource => dataSource
                .Ajax()
                .PageSize(5)
                .Read(read => read.Action("LeerIngresoDia", "Membresia"))
        )
        .Pageable()
        .Sortable()
        .Filterable()
        .Groupable()
    )
</div>

<script>
    function tipo(e){
        var dataItem = this.select();
        document.getElementsByName('estado')[0].value = dataItem;
    }
    
    function InsertarNomUsuario(e) {
        var dataItem = this.value();
        document.getElementsByName('familia.id')[0].value = dataItem;
        buscarnombre(dataItem);
    }

    function buscarnombre(value) {
        $.ajax({
            url: '@Url.Action("BuscarId")',
            type: 'POST',
            datatype: "json",
            traditional: true,
            data: {
                id: JSON.stringify(value),
            },
            success: function(persona){
                var str = persona.apPaterno + " " + persona.apMaterno
                document.getElementsByName('nombreBox')[0].value = str.toUpperCase();
            },
            error: function (event, request, settings) {
                models = [];
                window.alert("Debe ingresar una familia válido");
            },
            timeout: 20000
        });
    }

    function InsertarInvitado(e) {
        var dataItem = this.value();
        if(dataItem.length == 8){
            document.getElementsByName('invitado.dni')[0].value = dataItem;
            buscarInvitado(dataItem);
        }else{
            alert("Ingrese un DNI válido");
        }
    }



    function buscarInvitado(value) {
        $.ajax({
            url: '@Url.Action("BuscarInvitado")',
            type: 'POST',
            datatype: "json",
            traditional: true,
            data: {
                dni: JSON.stringify(value),
            },
            success: function(invitado){
                $('#invitado_nombre').prop('readonly', true);
                $('#invitado_apPaterno').prop('readonly', true);
                $('#invitado_apMaterno').prop('readonly', true);
                document.getElementsByName('invitado.nombre')[0].value = invitado.nombre;
                document.getElementsByName('invitado.apPaterno')[0].value = invitado.apPaterno;
                document.getElementsByName('invitado.apMaterno')[0].value = invitado.apMaterno;
            },
            error: function (event, request, settings) {
                models = [];
                window.alert("La persona no se encuentra registrada, por favor llene los datos correspondientes");
                $('#invitado_nombre').removeAttr('readonly');
                $('#invitado_apPaterno').removeAttr('readonly');
                $('#invitado_apMaterno').removeAttr('readonly');
                document.getElementsByName('invitado.nombre')[0].value = "";
                document.getElementsByName('invitado.apPaterno')[0].value = "";
                document.getElementsByName('invitado.apMaterno')[0].value = "";
            },
            timeout: 20000
        });
    }
</script>

<script type="text/javascript">
jQuery.validator.addMethod("accept2", function(value, element, param) {
  return value.match(new RegExp("^" + param + "$"));
});


$("#Form").validate({
		rules: {
            "invitado.nombre": {
                required: true,
                maxlength: 50,
                accept2: "[a-zA-ZñÑáéíóú ]+"
                },
            "invitado.apPaterno":  {
                required: true,
                maxlength: 50,
                accept2: "[a-zA-ZñÑáéíóú ]+"
                },
            "invitado.apMaterno": {
                required: true,
                maxlength: 50,
                accept2: "[a-zA-ZñÑáéíóú ]+"
                },

            },
		messages: {		
			descripcion: {
				required: "*Campo obligatorio",
                maxlength: "Ingrese 50 caracteres como máximo",
                accept2: "Solo se permiten numeros o letras"     
			    },
            fechaInicio: {
                 required: "*Campo obligatorio",
                 maxlength:"Ingrese 50 caracteres como maximo",
                 accept2: "En este campo solo se deben ingresar letras"
                },
            fechaFin: {
                 required: "*Campo obligatorio",
                 maxlength: "Ingrese 50 caracteres como maximo",
                 accept2: "En este campo solo se deben ingresar letras"
                },
             
		},
        submitHandler: function ConfirmationBox(form) {
        var result = confirm("¿Está seguro de realizar los cambios?");
        if (result == true) {
            form.submit();
            return true;
        }
        else {
            return false;
            }
        }
		
});
</script>